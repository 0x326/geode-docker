---
title:  Set Up OpenSSL
---

## Step 1. Download and install OpenSSL
The open-source OpenSSL toolkit provides a full-strength general purpose cryptography library to operate along with the PKCS sample implementation for encrypted authentication of native client credentials.

Follow these instructions to download and install OpenSSL for your specific operating system.

The native client requires OpenSSL 1.0.1h or later. For Windows platforms, you can use either the regular or the OpenSSL 1.0.1h "Light" version.

**Note:**
If you use Cygwin, it is recommended that you do not use the OpenSSL library that comes with Cygwin because it is built with `cygwin.dll` as a dependency.

<a id="security__section_5C95C2E4D9244B27BF8FD178E402D993"></a>
### Linux

Download the OpenSSL tarball archive from the OpenSSL web site at [http://www.openssl.org/source/](http://www.openssl.org/source/). Copy the downloaded tarball file into `NativeClient_xxxx/templates/security/openssl/Linux` and run `buildit.sh`.

<a id="security__section_93651F296C1A4EA5A3FA045EC15FB506"></a>

### Solaris

Download the OpenSSL tarball archive from the OpenSSL web site at [http://www.openssl.org/source/](http://www.openssl.org/source/). Copy the downloaded tarball file into `NativeClient_xxxx/templates/security/openssl/SunOS` and run `buildit.sh`.

<a id="security__section_68961A8829D44BFB8F542F3317464E5E"></a>

### Windows

Download the installer for OpenSSL from [http://www.openssl.org/related/binaries.html](http://www.openssl.org/related/binaries.html). You can also use the OpenSSL "Light" version.

Use the downloaded OpenSSL installer to install it on Windows. You can usually accept the default installation path (`C:\OpenSSL`).


## Step 2. Create keystores

The <span class="keyword">Geode</span> server requires keys and keystores in the Java Key Store (JKS) format while the native client requires them in the clear PEM format. Thus you need to be able to generate private/public keypairs in either format and convert between the two using the `keytool` utility and the `openssl` command.

There are public third party free tools and source code available to download such as the "KeyTool IUI" tool.


## Step 3. Configure environment variables

Configure your system environment to build and run OpenSSL. Follow the environment setup that applies to your operating system.

For all references to the Pivotal\_GemFire\_NativeClient\_*64bit*\_*xxxx* directory, replace *64bit* with the appropriate architecture and *xxxx* with the actual four-digit product build number.

<a id="security__section_6C173D0D8C8343EA92961C954032E2CA"></a>
### Bourne and Korn shells (sh, ksh, bash)

``` pre
% OPENSSL=<parent folder for OpenSSL binaries>; export OPENSSL
% GFCPP=<path to installation, typically C:\Pivotal_GemFire_NativeClient_64bit_xxxx>; export GFCPP
% LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$GFCPP/lib:$GFCPP/ssl_libs:$OPENSSL/lib
% export LD_LIBRARY_PATH
% CLASSPATH=$GEMFIRE/lib/gfSecurityImpl.jar:$CLASSPATH
```

<a id="security__section_76CF86EDC2234BA6BF7DA6E253C71F61"></a>

### Windows

``` pre
> set GFCPP=<path to installation, typically C:\Pivotal_GemFire_NativeClient_32or64bit_xxxx>
> set OPENSSL=<path to installed OpenSSL, typically C:\OpenSSL>
> set PATH=<path to Java JDK or JRE>\bin;%GFCPP%\bin;%GFCPP%\ssl_libs;%OPENSSL%\bin;%PATH%
> set CLASSPATH=<path to GemFire installation>\lib\gfSecurityImpl.jar;%CLASSPATH%
```


## Step 4. Configure SSL properties in gfcpp.properties and gemfire.properties

Configure SSL properties.

1.  In `gfcpp.properties`, set `ssl-enabled` to true and set `ssl-keystore` and `ssl-truststore` to point to your keystore files. See [Security-Related System Properties (gfcpp.properties)](security-systemprops.html#security) for a description of these properties.
2.  On each locator, set the following SSL properties in the locatorâ€™s `gemfire.properties` file:

    ``` pre
    server-ssl-enabled=true
    server-ssl-protocols=any
    server-ssl-require-authentication=true
    server-ssl-ciphers=SSL_RSA_WITH_NULL_SHA
    ```


## Step 5. Start and stop the client and server

Before you start and stop the client and server, make sure you configure the native client with the SSL properties as described and with the servers or locators specified as usual.

Specifically, ensure that:

-   OpenSSL and ACE\_SSL `DLL`s locations are in the right environment variables for your system: `PATH` for Windows, and `LD_LIBRARY_PATH` for Unix.
-   You have generated the keys and keystores.
-   You have set the system properties.

For details on stopping and starting locators and cache servers with SSL, see [Starting Up and Shutting Down Your System](../../configuring/running/starting_up_shutting_down.html).

**Example locator start command**

Ensure that all required SSL properties are configured in your server's `gfsecurity.properties` file. Then start your locator as follows:

``` pre
gfsh>start locator --name=my_locator --port=12345 --dir=. \
--security-properties-file=/path/to/your/gfsecurity.properties
```

**Example locator stop command**

``` pre
gfsh>stop locator --port=12345 \
--security-properties-file=/path/to/your/gfsecurity.properties
```

**Example server start command**

Again, ensure that all required SSL properties are configured in `gfsecurity.properties`. Then start the server with:

``` pre
gfsh>start server --name=my_server --locators=hostname[12345] \
--cache-xml-file=server.xml --log-level=fine \
--security-properties-file=/path/to/your/gfsecurity.properties
```

**Example server stop command**

``` pre
gfsh>stop server --name=my_server
```


