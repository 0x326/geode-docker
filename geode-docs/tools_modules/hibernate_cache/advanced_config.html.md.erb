---
title:  Advanced Configuration of the Hibernate Cache Module
---

<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

After you set up Hibernate to work with the Geode module, Geode will run automatically with preconfigured settings. Depending on your topology, you may want to change these settings.

Geode has these default settings:

-   Geode runs in a peer-to-peer configuration, rather than a client/server configuration.
-   Locators provide member discovery and load balancing services.
-   The cache region is replicated.

These settings might not reflect your preferred usage. To change these and other settings, refer to this section.

## <a id="hib_cach_adv_conf__configuration_flowchart" class="no-quick-link"></a>Configuration Flowchart

The following flowchart illustrates some of the decisions you might consider before making configuration changes. If the action says "no change req.", then no configuration change is required to run Geode in that mode. All other actions are cross-referenced below the flowchart. For more information about the common Geode topologies, refer to [Common Geode Topologies](advanced_config.html#hib_cach_adv_conf__common_gemfire_topologies). For general information on how to make configuration changes, refer to "Changing Geode's Default Configuration".

<img src="../../images/HibernateFlowchart.png" id="hib_cach_adv_conf__image_vjs_5c2_wv" class="image" />

-   **Use a Client/Server configuration**: See [Changing the Geode Topology](changing_gemfire_default_cfg.html#changing_gemfire_default_cfg__changing_gemfire_topology) for more information.
-   **Use a replicated region for server**: Change the server region shortcut to REPLICATE\_HEAP\_LRU as described in [Changing the Client/Server Region Attributes](changing_gemfire_default_cfg.html#changing_gemfire_default_cfg__changing_cs_region_atts).
-   **Use a partitioned region for peer**: Change the peer region shortcut to PARTITION as described in [Changing the Peer-to-peer Region Attributes](changing_gemfire_default_cfg.html#changing_gemfire_default_cfg__changing_p2p_region_atts).
-   **Use a CACHING\_PROXY region for client**: Change the client region shortcut to CACHING\_PROXY as described in [Changing the Client/Server Region Attributes](changing_gemfire_default_cfg.html#changing_gemfire_default_cfg__changing_cs_region_atts).

## <a id="hib_cach_adv_conf__common_gemfire_topologies" class="no-quick-link"></a>Common Geode Topologies

Before configuring the Geode module, you must consider which basic topology is suited for your usage. The configuration process is slightly different for each topology.

-   **Peer-to-Peer Configuration**. In a peer-to-peer configuration, each Geode instance within a Hibernate JVM contains its own cache. It communicates with other Geode instances as peers (rather than clients and servers). Depending on the way the Geode data region is defined, data is either replicated across all Geode peers or it is partitioned so that each instance's cache contains a portion of the entire data set. By default, data is replicated. A peer-to-peer configuration is useful when multiple systems need fast access to all data. By default, the Geode module will operate in a peer-to-peer configuration.
    <img src="../../images_svg/hibernate_p2p.svg" id="hib_cach_adv_conf__image_B94FF72772C84014B382F949C8CA998C" class="image" />
-   **Client/Server Configuration**. In a client/server configuration, the Hibernate JVM operates as a Geode client, which must communicate with one or more Geode servers to acquire data. A client/server configuration is useful when you want to separate the Hibernate JVM from the cached data. In this configuration, you can reduce the memory consumption of the Hibernate process since data is stored in separate Geode server processes. For instruction on running Geode in a client/server configuration, refer to [Changing the Geode Topology](changing_gemfire_default_cfg.html#changing_gemfire_default_cfg__changing_gemfire_topology).
    <img src="../../images_svg/hibernate_cs.svg" id="hib_cach_adv_conf__image_AAB713A6A4BC4BBEB1AFD5E6668E77BD" class="image" />

