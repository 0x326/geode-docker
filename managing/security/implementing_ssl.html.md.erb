---
title:  Configuring SSL
---

You can configure SSL for authentication between members and to protect your data during
distribution. You can use SSL alone or in conjunction with the other Geode security options.
Geode SSL connections use the Java Secure Sockets Extension (JSSE) package.

## Gateway SSL Configuration

The following table lists the SSL configuration property names used to configure SSL for peer-to-peer and WAN gateway connections. Remember that if you do not define a client/server, JMX, or WAN property, then Geode uses the property value defined for peer-to-peer communication (cluster-ssl\*) or the default peer-to-peer property value if unspecified.

<a id="concept_65874F58A47C4D10B29248BBF0635BFC__table_jpw_wqr_n4"></a>

<table>
<caption><span class="tablecap">Table 2. SSL Configuration Property Names by Connection Type</span></caption>
<colgroup>
<col width="50%" />
<col width="50%" />
</colgroup>
<thead>
<tr class="header">
<th>Peer-to-Peer Connection Property
<p>(provides default value for all other connection types)</p></th>
<th>WAN Gateway Connection Property</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>cluster-ssl-enabled</td>
<td>gateway-ssl-enabled</td>
</tr>
<tr class="even">
<td>cluster-ssl-ciphers</td>
<td>gateway-ssl-ciphers</td>
</tr>
<tr class="odd">
<td>cluster-ssl-protocols</td>
<td>gateway-ssl-protocols</td>
</tr>
<tr class="even">
<td>cluster-ssl-require-authentication</td>
<td>gateway-ssl-require-authentication</td>
</tr>
<tr class="odd">
<td>cluster-ssl-keystore-type</td>
<td>gateway-ssl-keystore-type</td>
</tr>
<tr class="even">
<td>cluster-ssl-keystore</td>
<td>gateway-ssl-keystore</td>
</tr>
<tr class="odd">
<td>cluster-ssl-keystore-password</td>
<td>gateway-ssl-keystore-password</td>
</tr>
<tr class="even">
<td>cluster-ssl-truststore</td>
<td>gateway-ssl-truststore</td>
</tr>
<tr class="odd">
<td>cluster-ssl-keystore-password</td>
<td>gateway-ssl-keystore-password</td>
</tr>
</tbody>
</table>

If you configure the above peer-to-peer SSL properties, then by default Geode uses the same SSL property values for all stream-socket communication. This includes communication between cache servers and clients, between the JMX manager and JMX clients, and between two Geode distributed systems connected by a WAN gateway.


## <a id="implementing_ssl__sec_ssl_impl_proc" class="no-quick-link"></a>Procedure

1.  Make sure your Java installation includes the JSSE API and familiarize yourself with its
use. For information, see the [Oracle JSSE website](http://www.oracle.com/technetwork/java/javase/tech/index-jsp-136007.html).

2.  Configure your security provider:

    1.  Specify the SSL provider in the `lib/security/java.security` file under your JRE home
    directory. Indicate the providers you are using for your certificate, protocol, and cipher
    suites. Your Java installation should include information on how to modify this file. The
    security file is usually self-documenting.

    2.  Specify provider-required configuration settings. These are usually key store and trust store
    configuration parameters, such as the `keystore` and `truststore` properties described above. Your
    provider documentation should describe specific configuration requirements. You can add these
    configurations in a separate, restricted-access `gfsecurity.properties` file.

3.  Configure SSL as needed for each connection type:

    1.  Use locators for member discovery within the distributed systems and for client discovery of
    servers. See [Configuring Peer-to-Peer Discovery](../../topologies_and_comm/p2p_configuration/setting_up_a_p2p_system.html) and
    [Configuring a Client/Server System](../../topologies_and_comm/cs_configuration/setting_up_a_client_server_system.html#setting_up_a_client_server_system).

    2.  Configure SSL properties as necessary for different component types, using the properties
    described above. For example, to enable SSL for
    communication between clients and servers you would configure properties in the
    `gemfire.properties` file similar to:

        ``` pre
        ssl-enabled-components=server
        ssl-protocols=any
        ciphers=SSL_RSA_WITH_NULL_MD5, SSL_RSA_WITH_NULL_SHA
        ssl-keystore=/path/to/trusted.keystore
        ssl-keystore-password=password
        ssl-truststore=/path/to/trusted.keystore
        ssl-truststore-password=password
        ```


