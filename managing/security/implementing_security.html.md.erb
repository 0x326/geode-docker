---
title:  Security Implementation Overview
---

Apache Geode can authenticate system members, clients, and other system
entities. It can also individually authorize cache operations 
for those various entities.

<a id="implementing_security__section_79F6CF928E764CA294D466D0CB2E5FAC"></a>
For aspects of the secure communication:

-   Use consistent security settings between similar processes in a single distributed system. For example, configure all servers in a system with the same client authentication settings.
-   If you have a client/server system, implement any authorized access control your servers will use for clients attempting to access or modify the cache.
-   If you want to use secure socket layer (SSL) protocol for your peer-to-peer and client/server connections, implement that. You can configure SSL separately for peer-to-peer, client/server, gateway senders and receivers, JMX, 
and HTTP connections.

## <a id="implementing_security__section_1B8A856DB52449C6BF2AEB7C0D9515B5" class="no-quick-link"></a>Where to Place Security Configuration Settings

Any security-related (properties that begin with `security-*`) configuration properties that are normally configured in `gemfire.properties` can be moved to a separate `gfsecurity.properties` file. Placing these configuration settings in a separate file allows you to restrict access to security configuration data. This way, you can still allow read or write access for your `gemfire.properties` file.

Upon startup, Geode processes will look for the `gfsecurity.properties` file in the following locations in order:

-   current working directory
-   user's home directory
-   classpath

If any password-related security properties are listed in the file but have a blank value, the process will prompt the user to enter a password upon startup.

<a id="implementing_security__section_155ED414321E4D4ABBD7ED3508E7BD62"></a>


